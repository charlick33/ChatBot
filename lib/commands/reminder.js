// Generated by CoffeeScript 1.3.3
var reminderCommand,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

reminderCommand = (function(_super) {

  __extends(reminderCommand, _super);

  function reminderCommand() {
    return reminderCommand.__super__.constructor.apply(this, arguments);
  }

  reminderCommand.prototype.init = function() {
    this.command = '/reminder';
    this.parseType = 'startsWith';
    return this.rankPrivelege = 'mod';
  };

  reminderCommand.prototype.functionality = function() {
    var cmd, cmdPatt, params, reminder, reminderParams;
    cmd = this.msgData.message;
    if (cmd.length > 10) {
      params = cmd.slice(10);
      cmdPatt = /^"(.+)"\s(\d)$/;
      reminderParams = cmdPatt.exec(params);
      if ((reminderParams != null) && reminderParams.length === 3) {
        reminder = {
          songCount: parseInt(reminderParams[2]) + data.songCount,
          msg: reminderParams[1]
        };
        data.reminders.push(reminder);
        return API.sendChat("Ok I'm going to say '" + reminderParams[1] + "' in " + reminderParams[2] + " songs.");
      } else {
        API.sendChat("look at that poopy ass syntax right there");
        return console.log(cmd, cmdPatt, reminderParams);
      }
    } else {
      return API.sendChat("ur syntax is just plain poopy");
    }
  };

  return reminderCommand;

})(Command);
